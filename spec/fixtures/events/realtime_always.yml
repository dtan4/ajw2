event:
  trigger:
    id: event01
    target: submitBtn
    type: onClick
    realtime: true
    params:
    - id: message
      type: string
      value:
        element: messageTextBox
        func: getValue
        type: element
  action:
    type: always
    actions:
    - id: db01
      type: database
      database: messages
      func: create
      where: []
      fields:
      - field: message
        value:
          type: param
          id: message
    - id: if01
      type: interface
      element: messageLabel
      func: setValue
      value:
        type: param
        id: message
ruby: |
  when "event01"
    response[:_db_errors] = {}
    response[:_event] = "event01"
    message = params[:message]
    db01 = Message.new(
      message: message
    )
    response[:_db_errors][:db01] = db01.errors.full_messages unless db01.save
    response[:if01] = message
    EventMachine.next_tick do
      settings.sockets.each { |s| s.send(response.to_json) }
    end
javascript: |
  $('#submitBtn').click(function() {
    var message = $('#messageTextBox').val();
    var params = { 'message': message };
    var request = { 'func': 'event01', 'params': params };
    ws.send(JSON.stringify(request));
  });
onmessage: |
  case 'event01':
    if (_msg['_db_errors'].length == 0) {
      var if01 = _msg['if01'];
      $('#messageLabel').val(if01);
    } else {
    }
    break;
